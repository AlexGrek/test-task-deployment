stages:
  - docker-build-push
  - helm-deploy

variables:
  IMAGE_NAME: "dummy-dotnet-app"
  REGISTRY: "$CI_REGISTRY"
  HELM_CHART_NAME: "dotnet-app"
  HELM_RELEASE_NAME: "${CI_PROJECT_NAME}-${CI_ENVIRONMENT_SLUG}"
  KUBERNETES_NAMESPACE: "${CI_PROJECT_NAME}-${CI_ENVIRONMENT_SLUG}"

# Build and push image in one job
docker-build-push:
  stage: docker-build-push
  image: docker:24-dind
  services:
    - docker:24-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - cd docker-images/dummy-dotnet-app
    # Use GitLab-provided variables for tag
    - export IMAGE_TAG=${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA}
    - export FULL_IMAGE="${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
    - echo "Building and pushing image ${FULL_IMAGE}"
    - echo "IMAGE_TAG=${IMAGE_TAG}" > ../../build.env
    - echo "FULL_IMAGE=${FULL_IMAGE}" >> ../../build.env
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build -t $FULL_IMAGE .
    - docker tag $FULL_IMAGE ${REGISTRY}/${IMAGE_NAME}:latest
    - docker push $FULL_IMAGE
    - docker push ${REGISTRY}/${IMAGE_NAME}:latest
    - echo "Pushed images:"
    - echo "  - $FULL_IMAGE"
    - echo "  - ${REGISTRY}/${IMAGE_NAME}:latest"
  artifacts:
    reports:
      dotenv: build.env
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_BRANCH

# Helm deploy stage
helm-deploy:
  stage: helm-deploy
  image: deployer:latest
  dependencies:
    - docker-build-push
  before_script:
    # Setup kubectl config from GitLab secret
    - mkdir -p ~/.kube
    - echo "$KUBE_CONFIG" | base64 -d > ~/.kube/config
    - kubectl config current-context
    # Create namespace if it doesn't exist
    - kubectl create namespace $KUBERNETES_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
    # Use GitLab-provided tag/hash
    - export IMAGE_TAG=${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA}
    - echo "Deploying with image tag: ${IMAGE_TAG}"
  script: |
    # Deploy with Helm using GitLab secrets
    helm upgrade --install $HELM_RELEASE_NAME ./helm-chart/ \
      --namespace $KUBERNETES_NAMESPACE \
      --create-namespace \
      --wait \
      --timeout 10m \
      --set image.repository=${REGISTRY}/${IMAGE_NAME} \
      --set image.tag=${IMAGE_TAG} \
      --set redis.auth.password="$REDIS_PASSWORD" \
      --set postgresql.auth.postgresPassword="$POSTGRES_ADMIN_PASSWORD" \
      --set postgresql.auth.password="$POSTGRES_APP_PASSWORD" \
      --set postgresql.auth.username="$POSTGRES_APP_USERNAME" \
      --set postgresql.auth.database="$POSTGRES_DATABASE" \
      --set questdb.auth.password="$QUESTDB_PASSWORD" \
      --set questdb.auth.username="$QUESTDB_USERNAME"

    # Run Helm tests
    helm test $HELM_RELEASE_NAME --namespace $KUBERNETES_NAMESPACE
    
    # Display deployment status
    kubectl get pods -n $KUBERNETES_NAMESPACE
    kubectl get services -n $KUBERNETES_NAMESPACE
    echo "Application deployed successfully with image tag: ${IMAGE_TAG}"
  rules:
    - if: $CI_COMMIT_BRANCH
